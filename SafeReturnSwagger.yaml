openapi: 3.0.3
info:
  title: SafeReturn API
  description: |-
    SafeReturn est une application innovante conçue pour offrir une interface centralisée, permettant aux utilisateurs de signaler et de rechercher des animaux perdus et retrouvés. L'application regroupe un ensemble d'annonces de recherche d'animaux disparus sur une seule plateforme afin de faciliter les recherches. SafeReturn intègre des fonctionnalités avancées telles que la géolocalisation, des filtres personnalisés, des notifications instantanées, la gestion des récompenses, ainsi qu'une communication directe entre les propriétaires d'animaux et les chercheurs.
    
    L'API de SafeReturn couvre les fonctionnalités suivantes :
    - **Création et gestion des utilisateurs** : Cette fonctionnalité permet d'ajouter, de modifier, de supprimer et de récupérer les informations relatives aux utilisateurs de l'application..
    - **Création et gestion de déclarations de perte d'animal** : L'API permet l'ajout, la modification, la suppression et la récupération des déclarations concernant les animaux perdus ou retrouvés, ainsi que toutes les informations associées.
    - **Création et gestion de d'abonnement'** : Cette fonctionnalité permet aux utilisateurs de souscrire, de modifier, de résilier et de consulter les informations liées à leurs abonnements.
    - **Authentification et autorisation** : L'API valide les identifiants des utilisateurs et gère les tokens JWT pour sécuriser les accès.
    - **Mise en place d'un paiement** : SafeReturn permet de gérer les paiements, y compris les abonnements premium et l'historique des transactions.
    
    
     ## Description des endpoints :
    - **/declarations** : Ce point d'accès permet de gérer les déclarations d'animaux perdus ou retrouvés. Il offre des fonctionnalités pour créer, consulter et rechercher des déclarations d'animaux, facilitant ainsi la mise en relation des utilisateurs.
    - **/users** : Ce point d'accès gère la création, la récupération et la modification des profils utilisateurs. Il permet de gérer les informations personnelles et les paramètres de chaque utilisateur de l'application.
    - **/payments** : Ce point d'accès permet de gérer les paiements effectués au sein de l'application, notamment pour les abonnements premium, ainsi que pour consulter l'historique des transactions réalisées par les utilisateurs.
    - **/subscriptions** : Ce point d'accès est dédié à la gestion des abonnements des utilisateurs de SafeReturn. Il permet de souscrire, modifier ou annuler un abonnement, ainsi que d'accéder aux informations liées à ces derniers.

  version: 1.0.0
servers:
  - url: https://api.safereturn.com
    description: Serveur principal de SafeReturn
tags:
  - name: declarations
    description: Gestion des déclarations de perte ou de découverte
  - name: users
    description: Gestion des utilisateurs et profils
  - name: payments
    description: Gestion des paiements d'abonnement comme des récompenses
  - name: subscriptions
    description: Gestion des abonnements
paths:
  /v1/declarations:
    post:
      tags:
        - declarations
      summary: Créer une déclaration de perte
      description: Permet aux propriétaires de déclarer un animal perdu.
      operationId: createDeclaration
      requestBody:
        description: Informations sur l'animal perdu
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: Type de déclaration (perte ou découverte)
                  enum: [lost, found]
                animalDetails:
                  type: object
                  description: Caractéristiques de l'animal
                  properties:
                    species:
                      type: string
                      description: L'espéce de l'animal
                      enum: [cat, dog, rabbit, bird, snake, tiger, lion, hamster, mouse, other]
                    breed:
                      description: La race précise de l'animal
                      type: string
                    color:
                      description: Les différentes couleurs de l'animal
                      type: array
                      items:
                        type: string
                    weight:
                      description: Le poids de l'animal en Kg.
                      type: number
                      format: float
                    size:
                      description: La taille de l'animal en centimètres. La taille est la hauteur de l'animal dans sa position naturelle (sur les 4 pattes pour un chien par exemple).
                      type: number
                      format: float
                    age:
                      description: L'age de l'animal en age humain, c'est-à-dire le nombre d'années écoulées depuis sa naissance.
                      type: integer
                      format: int64
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                      format: double
                    longitude:
                      type: number
                      format: double
                  description: Localisation de la perte ou découverte
                photo:
                  type: string
                  format: uri
                  description: Lien vers la photo de l'animal
                reward:
                  type: integer
                  format: int64
                  description: Récompense proposée en euros pour celui qui trouvera l'animal
                status:
                  type: string
                  enum: [active, resolved]
              example:
                type: lost
                animalDetails:
                  species: dog
                  breed: labrador
                  color: [black, white]
                  weight: 10
                  size: 64
                  age: 3
                location:
                  latitude: 48.866667
                  longitude: 2.333333
                photo: https://example.com/photos/dog.jpg
                reward: 60
                status: active

      responses:
        '201':
          description: Déclaration créée avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Declarations'
              examples:
                exempleReponse:
                  value:
                    id: 45
                    type: lost
                    animalDetails:
                      species: dog
                      breed: labrador
                      color: [black, white]
                      weight: 10
                      size: 64
                      age: 3
                    location:
                      latitude: 48.866667
                      longitude: 2.333333
                    photo: https://example.com/photos/dog.jpg
                    reward: 60
                    status: active
        '400':
          description: Données invalides
    get:
      tags:
        - declarations
      summary: Liste des déclarations
      description: Récupère l'ensemble des déclarations disponibles. La récupération en mode pagination est disponible grâce au paramètre "page". Si le paramètre page n'est pas renseigné alors la réponse contiendra l'ensemble des déclarations, sinon la réponse contiendra un paquet de 50 déclarations.
      operationId: listDeclarations
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Récupérer les déclarations en mode pagination. La numérotation des pages commencent au numéro 0, ainsi pour requêter la première page il faudra mettre ce paramètre à 0.
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: Filtrer par statut (perdu ou trouvé)
          schema:
            type: string
            enum: [lost, found]
        - name: location
          in: query
          description: Filtrer par localisation
          schema:
            type: string
        - name: animal
          in: query
          description: Filtrer par type d'animal
          schema:
            type: string
      responses:
        '200':
          description: Liste des déclarations avec pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedDeclarations'
        '404':
          description: Aucune déclaration trouvée

  /v1/declarations/{id}:
    get:
      tags:
        - declarations
      summary: Obtenir une déclaration spécifique
      description: Récupère les détails d'une déclaration à partir de son ID.
      operationId: getDeclarationById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de la déclaration
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Déclaration trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Declarations'
        '404':
          description: Déclaration non trouvée
    delete:
      tags:
        - declarations
      summary: Supprimer une déclaration
      description: Supprime une déclaration à partir de son ID.
      operationId: deleteDeclaration
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de la déclaration à supprimer
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Déclaration supprimée avec succès
        '404':
          description: Déclaration non trouvée
        '401':
          description: Non autorisé

    patch:
      tags:
        - declarations
      summary: Mettre à jour partiellement une déclaration
      description: Permet de mettre à jour des informations spécifiques d'une déclaration existante.
      operationId: updateDeclaration
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de la déclaration à mettre à jour
          required: true
          schema:
            type: integer
      requestBody:
        description: Champs à mettre à jour dans la déclaration
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: Type de déclaration (perte ou découverte)
                  enum: [lost, found]
                animalDetails:
                  type: object
                  description: Caractéristiques de l'animal
                  properties:
                    species:
                      type: string
                      description: L'espéce de l'animal
                      enum: [cat, dog, rabbit, bird, snake, tiger, lion, hamster, mouse, other]
                    breed:
                      description: La race précise de l'animal
                      type: string
                    color:
                      description: Les différentes couleurs de l'animal
                      type: array
                      items:
                        type: string
                    weight:
                      description: Le poids de l'animal en Kg.
                      type: number
                      format: float
                    size:
                      description: La taille de l'animal en centimètres. La taille est la hauteur de l'animal dans sa position naturelle (sur les 4 pattes pour un chien par exemple).
                      type: number
                      format: float
                    age:
                      description: L'age de l'animal en age humain, c'est-à-dire le nombre d'années écoulées depuis sa naissance.
                      type: integer
                      format: int64
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                      format: double
                    longitude:
                      type: number
                      format: double
                  description: Localisation de la perte ou découverte
                photo:
                  type: string
                  format: uri
                  description: Lien vers la photo de l'animal
                reward:
                  type: integer
                  format: int64
                  description: Récompense proposée en euros pour celui qui trouvera l'animal
                status:
                  type: string
                  enum: [active, resolved]
              example:
                type: lost
                animalDetails:
                  species: dog
                  breed: labrador
                  color: [black, white]
                  weight: 10
                  size: 64
                  age: 3
                location:
                  latitude: 48.866667
                  longitude: 2.333333
                photo: https://example.com/photos/dog.jpg
                reward: 60
                status: active
      responses:
        '200':
          description: Déclaration mise à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Declarations'
        '400':
          description: Données invalides
        '404':
          description: Déclaration non trouvée
  /v1/users:
    post:
      tags:
        - users
      summary: Créer un profil utilisateur
      description: Enregistrement d'un utilisateur dans l'application.
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        description: Détails de l'utilisateur
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                phone:
                  type: string
              example:
                username: "Lionel"
                email: "unemail@gmail.com"
                phone: "+33754871209"

      responses:
        '201':
          description: Profil utilisateur créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'

        '400':
          description: Données utilisateur invalides

    get:
      tags:
        - users
      summary: Liste des utilisateurs
      description: Récupère la liste de tous les utilisateurs enregistrés.
      operationId: listUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des utilisateurs avec pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedUsers'
        '404':
          description: Aucun utilisateur trouvé
        '401':
          description: Utilisateur non vérifié

  /v1/users/{id}:
    get:
      tags:
        - users
      summary: Obtenir un utilisateur
      description: Récupère les informations d'un utilisateur à partir de son ID.
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de l'utilisateur
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Utilisateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          description: Utilisateur non trouvé
    delete:
      tags:
        - users
      summary: Supprimer un utilisateur
      description: Supprime un utilisateur à partir de son ID.
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de l'utilisateur à supprimer
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Utilisateur supprimé avec succès
        '404':
          description: Utilisateur non trouvé
        '401':
          description: Non autorisé

    patch:
      tags:
        - users
      summary: Mettre à jour partiellement un utilisateur
      description: Permet de mettre à jour des informations spécifiques d'un utilisateur.
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de l'utilisateur à mettre à jour
          required: true
          schema:
            type: integer
      requestBody:
        description: Champs à mettre à jour dans le profil utilisateur
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                phone:
                  type: string
              example:
                username: "Lionel"
                email: "unemail@gmail.com"
                phone: "+33754871209"
      responses:
        '200':
          description: Utilisateur mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Données invalides
        '404':
          description: Utilisateur non trouvé
  /v1/users/login:
    post:
      tags:
        - users
      summary: Authentifier un utilisateur
      description: Permet aux utilisateurs de se connecter et de recevoir un token d'authentification.
      operationId: login
      requestBody:
        description: Informations de connexion de l'utilisateur
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Authentification réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Échec de l'authentification (identifiants invalides)
  /v1/users/register:
    post:
      tags:
        - users
      summary: création de compte d'un utilisateur
      description: Permet aux utilisateurs de créer un compte SafeReturn
      operationId: register
      requestBody:
        description: Informations de connexion de l'utilisateur
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Authentification réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Échec de l'authentification (identifiants invalides)
  /v1/payments:
    post:
      tags:
        - payments
      summary: Effectuer un paiement ou s'abonner
      description: Gérer les paiements pour les fonctionnalités premium.
      operationId: processPayment
      requestBody:
        description: Détails du paiement
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payments'
      responses:
        '200':
          description: Paiement réussi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '400':
          description: Échec du paiement
    get:
      tags:
        - payments
      summary: Historique des paiements
      description: Récupère la liste des paiements effectués par les utilisateurs.
      operationId: listPayments
      responses:
        '200':
          description: Liste des paiements avec pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedPayments'
        '404':
          description: Aucun paiement trouvé
  /v1/payments/{id}:

    get:
      tags:
        - payments
      summary: Obtenir un paiement
      description: Récupère les informations d'un paiement à partir de son ID de correlation.
      operationId: getPaymentById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID du paiement
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Paiement trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '404':
          description: Paiement non trouvé
    delete:
      tags:
        - payments
      summary: Supprimer un paiement
      description: Supprime un paiement à partir de son ID.
      operationId: deletePayment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de correlation du paiement à supprimer
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Paiement supprimé avec succès
        '404':
          description: Paiement non trouvé
        '401':
          description: Non autorisé

    patch:
      tags:
        - payments
      summary: Mettre à jour partiellement un paiement
      description: Permet de modifier certaines informations d'un paiement existant.
      operationId: updatePayment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de correlation du paiement à mettre à jour
          required: true
          schema:
            type: integer
      requestBody:
        description: Champs à mettre à jour pour le paiement
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                currency:
                  type: string
                  example: "Yen"
                method:
                  type: string
                  enum: [credit_card, paypal, bank_transfer]
                status:
                  type: string
                  enum: [success, failed]
      responses:
        '200':
          description: Paiement mis à jour avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  rewarderId:
                    type: integer
                    description: Id of the user who posted the declaration
                  receiverId:
                    type: integer
                    description: Id of the user who received the declaration's reward
                  correlationId:
                    type: integer
                    description: Id given by the client that describes a unique transaction
                  amount:
                    type: number
                    format: float
                    description: Sum of the transaction
                  currency:
                    type: string
                    description: Currency of the transaction (dollar, euro, etc...)
                  method:
                    type: string
                    enum: [credit_card, paypal, bank_transfer]
                  status:
                    type: string
                    enum: [success, failed]
                example:
                  rewarderId: 40
                  receiverId: 52
                  correlationId: 111111
                  amount: 0
                  currency: "Yen"
                  method: "credit_card"
                  status: "success"
        '400':
          description: Données invalides
        '404':
          description: Paiement non trouvé

  /v1/subscriptions:
    post:
      tags:
        - subscriptions
      summary: Créer un abonnement
      description: Permet de souscrire à un abonnement premium.
      operationId: createSubscription
      requestBody:
        description: Détails de l'abonnement
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                planId:
                  type: integer
                  description: ID du plan d'abonnement choisi
                userId:
                  type: integer
                  description: ID de l'utilisateur souscrivant à l'abonnement
      responses:
        '201':
          description: Abonnement créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Données invalides

    get:
      tags:
        - subscriptions
      summary: Liste des abonnements
      description: Récupère la liste des abonnements disponibles.
      operationId: listSubscriptions
      responses:
        '200':
          description: Liste des abonnements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '404':
          description: Aucun abonnement trouvé

  /v1/subscriptions/{id}:
    get:
      tags:
        - subscriptions
      summary: Obtenir un abonnement
      description: Récupère les détails d'un abonnement spécifique.
      operationId: getSubscriptionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Abonnement trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '404':
          description: Abonnement non trouvé


    patch:
      tags:
        - subscriptions
      summary: Mettre à jour un abonnement
      description: Met à jour les informations d'un abonnement existant.
      operationId: updateSubscription
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Champs à mettre à jour
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [active, cancelled]
      responses:
        '200':
          description: Abonnement mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Données invalides
        '404':
          description: Abonnement non trouvé

    delete:
      tags:
        - subscriptions
      summary: Annuler un abonnement
      description: Annule un abonnement existant.
      operationId: deleteSubscription
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Abonnement annulé avec succès
        '404':
          description: Abonnement non trouvé

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    Subscription:
      type: object
      properties:
        id:
          type: integer
          description: ID unique de l'abonnement
        userId:
          type: integer
          description: ID de l'utilisateur
        startDate:
          type: string
          format: date-time
          pattern: "YYYY-MM-DD"
          minLength: 0
          maxLength: 10
          description: Date de début de l'abonnement
        endDate:
          type: string
          format: date-time
          pattern: "YYYY-MM-DD"
          minLength: 0
          maxLength: 10
          description: Date de fin de l'abonnement
        status:
          type: string
          enum: [active, cancelled]
          description: Statut actuel de l'abonnement
      example:
        id: 2
        userId: 13
        startDate: "2017-01-01"
        endDate:  "2017-04-01"
        status: active

    AuthRequest:
      type: object
      properties:
        username:
          type: string
          description: Nom d'utilisateur ou email
        password:
          type: string
          format: password
          description: Mot de passe
      example:
        username: "Lionel112"
        password: "1234567890"
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: Token JWT pour l'accès sécurisé
        expiresIn:
          type: integer
          description: Durée de validité du token en secondes
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        expiresIn: "9000000"

    Declarations:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          description: Type de déclaration (perte ou découverte)
          enum: [lost, found]
        animalDetails:
          type: object
          description: Caractéristiques de l'animal
          properties:
            species:
              type: string
              description: L'espéce de l'animal
              enum: [cat, dog, rabbit, bird, snake, tiger, lion, hamster, mouse, other]
            breed:
              description: La race précise de l'animal
              type: string
            color:
              description: Les différentes couleurs de l'animal
              type: array
              items:
                type: string
            weight:
              description: Le poids de l'animal en Kg.
              type: number
              format: float
            size:
              description: La taille de l'animal en centimètres. La taille est la hauteur de l'animal dans sa position naturelle (sur les 4 pattes pour un chien par exemple).
              type: number
              format: float
            age:
              description: L'age de l'animal en age humain, c'est-à-dire le nombre d'années écoulées depuis sa naissance.
              type: integer
              format: int64
        location:
          type: object
          properties:
            latitude:
              type: number
              format: double
            longitude:
              type: number
              format: double
          description: Localisation de la perte ou découverte
        photo:
          type: string
          format: uri
          description: Lien vers la photo de l'animal
        reward:
          type: integer
          format: int64
          description: Récompense proposée en euros pour celui qui trouvera l'animal
        status:
          type: string
          enum: [active, resolved]
      example:
        id: 45
        type: lost
        animalDetails:
          species: dog
          breed: labrador
          color: [black, white]
          weight: 10
          size: 64
          age: 3
        location:
          latitude: 48.866667
          longitude: 2.333333
        photo: https://example.com/photos/dog.jpg
        reward: 60
        status: active

    Users:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        phone:
          type: string
      example:
        id: 40
        username: "Lionel"
        email: "unemail@gmail.com"
        phone: "+33754871209"
    Payments:
      type: object
      properties:
        rewarderId:
          type: integer
          description: Id of the user who posted the declaration
        receiverId:
          type: integer
          description: Id of the user who received the declaration's reward
        correlationId:
          type: integer
          description: Id given by the client that describes a unique transaction
        amount:
          type: number
          format: float
          description: Sum of the transaction
        currency:
          type: string
          description: Currency of the transaction (dollar, euro, etc...)
        method:
          type: string
          enum: [credit_card, paypal, bank_transfer]
        status:
          type: string
          enum: [success, failed]
      example:
        rewarderId: 40
        receiverId: 52
        correlationId: 111111
        amount: 9999999
        currency: "Yen"
        method: "credit_card"
        status: "success"

    PaginatedDeclarations:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Declarations'
        totalItems:
          type: integer
          description: Nombre total de déclarations
        totalPages:
          type: integer
          description: Nombre total de pages
        currentPage:
          type: integer
          description: Numéro de la page actuelle
      example:
        items:
          - id: 45
            type: "lost"
            animalDetails:
              species: "dog"
              breed: "labrador"
              color:
                - "black"
                - "white"
              weight: 10
              size: 64
              age: 3
            location:
              latitude: 48.866667
              longitude: 2.333333
            photo: "https://example.com/photos/dog.jpg"
            reward: 60
            status: "active"
        totalItems: 1
        totalPages: 1
        currentPage: 1


    PaginatedUsers:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Users'
        totalItems:
          type: integer
          description: Nombre total d'utilisateurs
        totalPages:
          type: integer
          description: Nombre total de pages
        currentPage:
          type: integer
          description: Numéro de la page actuelle
      example:
        items:
          - id: 40
            username: "Lionel"
            email: "unemail@gmail.com"
            phone: "+33754871209"
        totalItems: 1
        totalPages: 1
        currentPage: 1

    PaginatedPayments:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Payments'
        totalItems:
          type: integer
          description: Nombre total de paiements
        totalPages:
          type: integer
          description: Nombre total de pages
        currentPage:
          type: integer
          description: Numéro de la page actuelle
      example:
        items:
          - rewarderId: 40
            receiverId: 52
            correlationId: 111111
            amount: 9999999
            currency: "Yen"
            method: "credit_card"
            status: "success"
        totalItems: 1
        totalPages: 1
        currentPage: 1

