openapi: 3.0.3
info:
  title: SafeReturn API
  description: |-
    SafeReturn est une application conçue pour centraliser les déclarations d'animaux ou d'objets perdus/trouvés. Elle facilite la recherche avec des fonctionnalités de géolocalisation, filtres personnalisés, notifications instantanées, gestion de récompenses et communication directe entre propriétaires et chercheurs.
    
    
     ## Description des endpoints :
    - **/declarations** : Gère les déclarations de pertes ou de découvertes, permet de créer, consulter et rechercher des déclarations.
    - **/users** : Gère la création et la récupération des profils utilisateurs.
    - **/payments** : Permet de gérer les paiements, notamment les abonnements premium et les historiques des transactions.
    - **/auth** : Permet l'authentification et la gestion des tokens.
    
  version: 1.0.0
servers:
  - url: https://api.safereturn.com
    description: Serveur principal de SafeReturn
tags:
  - name: declarations
    description: Gestion des déclarations de perte ou de découverte
  - name: users
    description: Gestion des utilisateurs et profils
  - name: payments
    description: Paiements et abonnements
  - name: notifications
    description: Notifications entre utilisateurs
paths:
  /v1/declarations:
    post:
      tags:
        - declarations
      summary: Créer une déclaration de perte
      description: Permet aux propriétaires de déclarer un animal ou objet perdu.
      operationId: createDeclaration
      requestBody:
        description: Informations sur l'animal ou l'objet perdu
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [lost, found]
                animalDetails:
                  type: object
                  description: Caractéristiques de l'animal
                  properties:
                    species:
                      type: string
                      enum: [cat, dog, rabbit, bird, snake, tiger, lion, hamster, mouse, other]
                    breed:
                      type: string
                    color:
                      type: array
                      items:
                        type: string
                    weight:
                      type: number
                      format: float
                    size:
                      type: string
                    age:
                      type: string
                location:
                  type: string
                photo:
                  type: string
                  format: uri
                token:
                  type: string
                status:
                  type: string
                  enum: [active, resolved]
              example:
                type: lost
                animalDetails:
                  species: dog
                  breed: labrador
                  color: [black, white]
                  weight: 30
                  size: medium
                  age: 3 years
                location: Paris, France
                photo: https://example.com/photos/dog.jpg
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                status: active
          
      responses:
        '201':
          description: Déclaration créée avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Declarations'
              examples:
                exempleReponse:
                  value:
                    id: 123
                    type: lost
                    animalDetails:
                      species: dog
                      breed: labrador
                      color:
                        - black
                      weight: 30
                      size: medium
                      age: 3 years
                    location: Paris, France
                    photo: https://example.com/photos/dog.jpg
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    status: active
        '400':
          description: Données invalides
    get:
      tags:
        - declarations
      summary: Liste des déclarations
      description: Récupère les déclarations d'animaux ou objets perdus.
      operationId: listDeclarations
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filtrer par statut (perdu ou trouvé)
          schema:
            type: string
            enum: [lost, found]
        - name: location
          in: query
          description: Filtrer par localisation
          schema:
            type: string
        - name: animal
          in: query
          description: Filtrer par type d'animal
          schema:
            type: string    
      responses:
        '200':
          description: Liste des déclarations avec pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDeclarations'
        '404':
          description: Aucune déclaration trouvée
  
  /v1/declarations/{id}:
    get:
      tags:
        - declarations
      summary: Obtenir une déclaration spécifique
      description: Récupère les détails d'une déclaration à partir de son ID.
      operationId: getDeclarationById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de la déclaration
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Déclaration trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Declarations'
        '404':
          description: Déclaration non trouvée
    delete:
      tags:
        - declarations
      summary: Supprimer une déclaration
      description: Supprime une déclaration à partir de son ID.
      operationId: deleteDeclaration
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de la déclaration à supprimer
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Déclaration supprimée avec succès
        '404':
          description: Déclaration non trouvée
        '401':
          description: Non autorisé   
          
    patch:
      tags:
        - declarations
      summary: Mettre à jour partiellement une déclaration
      description: Permet de mettre à jour des informations spécifiques d'une déclaration existante.
      operationId: updateDeclaration
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de la déclaration à mettre à jour
          required: true
          schema:
            type: integer
      requestBody:
        description: Champs à mettre à jour dans la déclaration
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [lost, found]
                animalDetails:
                  type: object
                  description: Caractéristiques de l'animal
                  properties:
                    species:
                      type: string
                      enum: [cat, dog, rabbit, bird, snake, tiger, lion, hamster, mouse, other]
                    breed:
                      type: string
                    color:
                      type: array
                      items:
                        type: string
                    weight:
                      type: number
                      format: float
                    size:
                      type: string
                    age:
                      type: string
                location:
                  type: string
                photo:
                  type: string
                  format: uri
                token:
                  type: string
                status:
                  type: string
                  enum: [active, resolved]
              example:
                type: lost
                animalDetails:
                  species: dog
                  breed: labrador
                  color: [black, white]
                  weight: 30
                  size: medium
                  age: 3 years
                location: Paris, France
                photo: https://example.com/photos/dog.jpg
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                status: active
      responses:
        '200':
          description: Déclaration mise à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Declarations'
        '400':
          description: Données invalides
        '404':
          description: Déclaration non trouvée      
  /v1/users:
    post:
      tags:
        - users
      summary: Créer un profil utilisateur
      description: Enregistrement d'un utilisateur dans l'application.
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        description: Détails de l'utilisateur
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                phone:
                  type: string
              example:
                username: "Lionel"
                email: "unemail@gmail.com"
                phone: "+33754871209"
              
      responses:
        '201':
          description: Profil utilisateur créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
          
        '400':
          description: Données utilisateur invalides

    get:
      tags:
        - users
      summary: Liste des utilisateurs
      description: Récupère la liste de tous les utilisateurs enregistrés.
      operationId: listUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des utilisateurs avec pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '404':
          description: Aucun utilisateur trouvé
        '401':
          description: Utilisateur non vérifié
          
  /v1/users/{id}:
    get:
      tags:
        - users
      summary: Obtenir un utilisateur
      description: Récupère les informations d'un utilisateur à partir de son ID.
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de l'utilisateur
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Utilisateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          description: Utilisateur non trouvé
    delete:
      tags:
        - users
      summary: Supprimer un utilisateur
      description: Supprime un utilisateur à partir de son ID.
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de l'utilisateur à supprimer
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Utilisateur supprimé avec succès
        '404':
          description: Utilisateur non trouvé
        '401':
          description: Non autorisé     
          
    patch:
      tags:
        - users
      summary: Mettre à jour partiellement un utilisateur
      description: Permet de mettre à jour des informations spécifiques d'un utilisateur.
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID de l'utilisateur à mettre à jour
          required: true
          schema:
            type: integer
      requestBody:
        description: Champs à mettre à jour dans le profil utilisateur
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                phone:
                  type: string
              example:
                username: "Lionel"
                email: "unemail@gmail.com"
                phone: "+33754871209"
      responses:
        '200':
          description: Utilisateur mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Données invalides
        '404':
          description: Utilisateur non trouvé
  /v1/users/login:
    post:
      tags:
        - users
      summary: Authentifier un utilisateur
      description: Permet aux utilisateurs de se connecter et de recevoir un token d'authentification.
      operationId: login
      requestBody:
        description: Informations de connexion de l'utilisateur
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Authentification réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Échec de l'authentification (identifiants invalides)
  /v1/payments:
    post:
      tags:
        - payments
      summary: Effectuer un paiement ou s'abonner
      description: Gérer les paiements pour les fonctionnalités premium.
      operationId: processPayment
      requestBody:
        description: Détails du paiement
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payments'
      responses:
        '200':
          description: Paiement réussi
        '400':
          description: Échec du paiement
    get:
      tags:
        - payments
      summary: Historique des paiements
      description: Récupère la liste des paiements effectués par les utilisateurs.
      operationId: listPayments
      responses:
        '200':
          description: Liste des paiements avec pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPayments'
        '404':
          description: Aucun paiement trouvé
  /v1/payments/{id}:
  
    get:
      tags:
        - payments
      summary: Obtenir un paiement
      description: Récupère les informations d'un paiement à partir de son ID.
      operationId: getPaymentById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID du paiement
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Paiement trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '404':
          description: Paiement non trouvé   
    delete:
      tags:
        - payments
      summary: Supprimer un paiement
      description: Supprime un paiement à partir de son ID.
      operationId: deletePayment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID du paiement à supprimer
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Paiement supprimé avec succès
        '404':
          description: Paiement non trouvé
        '401':
          description: Non autorisé    
          
    patch:
      tags:
        - payments
      summary: Mettre à jour partiellement un paiement
      description: Permet de modifier certaines informations d'un paiement existant.
      operationId: updatePayment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID du paiement à mettre à jour
          required: true
          schema:
            type: integer
      requestBody:
        description: Champs à mettre à jour pour le paiement
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  type: string
                  example: "Yen"
                method:
                  type: string
                  enum: [credit_card, paypal, bank_transfer]
                status:
                  type: string
                  enum: [success, failed]
      responses:
        '200':
          description: Paiement mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '400':
          description: Données invalides
        '404':
          description: Paiement non trouvé    
          
          
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
  
    AuthRequest:
      type: object
      properties:
        username:
          type: string
          description: Nom d'utilisateur ou email
        password:
          type: string
          format: password
          description: Mot de passe
      example:
        username: "Lionel112"
        password: "1234567890"
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: Token JWT pour l'accès sécurisé
        expiresIn:
          type: integer
          description: Durée de validité du token en secondes
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        expiresIn: "9000000"
          
    Declarations:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          description: Type de déclaration (perte ou découverte)
          enum: [lost, found]
        animalDetails:
          type: object
          description: Caractéristiques de l'animal
          properties:
            species:
              type: string
              description: L'espéce de l'animal
              enum: [cat, dog, rabbit, bird, snake, tiger, lion, hamster, mouse, other]
            breed:
              description: La race précise de l'animal
              type: string
            color:
              description: Les différentes couleurs de l'animal
              type: array
              items:
                type: string
            weight:
              description: Le poids de l'animal en Kg.
              type: number
              format: float
            size:
              description: La taille de l'animal en centimètres. La taille est la hauteur de l'animal dans sa position naturelle (sur les 4 pattes pour un chien par exemple).
              type: number
              format: float
            age:
              description: L'age de l'animal en age humain, c'est-à-dire le nombre d'années écoulées depuis sa naissance.
              type: integer
              format: int64
        location:
          type: object
          properties: 
            latitude: 
              type: number
              format: double
            longitude: 
              type: number
              format: double
          description: Localisation de la perte ou découverte
        photo:
          type: string
          format: uri
          description: Photo de l'objet ou animal
        reward:
          type: integer
          format: int64
          description: Récompense proposée
        status:
          type: string
          enum: [active, resolved]
      example:
        id: 45
        type: lost
        animalDetails:
          species: dog
          breed: labrador
          color: [black, white]
          weight: 10
          size: 64
          age: 3
        location: 
          latitude: 48.866667
          longitude: 2.333333
        photo: https://example.com/photos/dog.jpg
        status: active

    Users:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        phone:
          type: string
      example:
        id: 40
        username: "Lionel"
        email: "unemail@gmail.com"
        phone: "+33754871209"
    Payments:
      type: object
      properties:
        rewarderId:
          type: integer
          description: Id of the user who posted the declaration
        receiverId:
          type: integer
          description: Id of the user who received the declaration's reward
        correlationId:
          type: integer
          description: Id given by the client that describes a unique transaction
        amount:
          type: number
          format: float
          description: Sum of the transaction
        currency:
          type: string
          description: Currency of the transaction (dollar, euro, etc...)
        method:
          type: string
          enum: [credit_card, paypal, bank_transfer]
        status:
          type: string
          enum: [success, failed]
      example:
        rewarderId: 40
        receiverId: 52
        correlationId: 111111
        amount: 9999999
        currency: "Yen"
        method: "credit_card"
        status: "success"
          
    PaginatedDeclarations:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Declarations'
        totalItems:
          type: integer
          description: Nombre total de déclarations
        totalPages:
          type: integer
          description: Nombre total de pages
        currentPage:
          type: integer
          description: Page actuelle
      example:
        items: [
        {
          type: lost,
          animalDetails: {
            species: dog,
            breed: labrador,
            color: [black, white],
            weight: 30,
            size: medium,
            age: 3 years
          },
          location: "Paris, France",
          photo: https://example.com/photos/dog.jpg,
          token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
          status: active
        }
        ]
        totalItems: 1
        totalPages: 1
        currentPage: 1
        
    PaginatedUsers:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Users'
        totalItems:
          type: integer
          description: Nombre total d'utilisateurs
        totalPages:
          type: integer
          description: Nombre total de pages
        currentPage:
          type: integer
          description: Page actuelle
      example:
        items: [
        {
          id: 40,
          username: "Lionel",
          email: "unemail@gmail.com",
          phone: "+33754871209"
        }
        ]
        totalItems: 1
        totalPages: 1
        currentPage: 1
    PaginatedPayments:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Payments'
        totalItems:
          type: integer
          description: Nombre total de paiements
        totalPages:
          type: integer
          description: Nombre total de pages
        currentPage:
          type: integer
          description: Page actuelle      
      example:
        items: [
        {
          rewarderId: 40,
          receiverId: 52,
          correlationId: 111111,
          amount: 9999999,
          currency: "Yen",
          method: "credit_card",
          status: "success"
        }
        ]
        totalItems: 1
        totalPages: 1
        currentPage: 1
